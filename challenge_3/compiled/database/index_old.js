const mysql = require('mysql');
const connection = mysql.createConnection({
  host: 'localhost',
  user: 'root',
  database: 'customer_data'
});

// write a function to get customer_id
var getId = function (callback) {
  connection.query('SELECT id FROM customer_info ORDER BY id DESC LIMIT 1', (err, results, fields) => {
    if (err) {
      callback(err, null);
    } else {
      callback(null, results);
    }
  });
};

// write function to add customer_info
var insertCustomer = function (first_name, last_name, email, pw, callback) {
  const query = 'INSERT INTO customer_info (first_name, last_name, email, pw) VALUES (?, ?, ?)';
  connection.query(query, [first_name, last_name, email, pw], (err, results, fields) => {
    callback(err, null);
  });
};

// write function to add shipping_info
// TODO: Get id from customer_data first
var insertShipping = function (id, line1, line2, city, state, zip) {
  const query = 'INSERT INTO customer_info (id, line1, line2, city, state, zip) VALUES (?, ?, ?, ?, ?, ?)';
  connection.query(query, [id, line1, line2, city, state, zip], (err, results, fields) => {
    callback(err, null);
  });
};

// write function to add payment_info
// TODO: Get id from customer_data first
var insertPayment = function (id, card_number, expiration, cvv, zip) {
  const query = 'INSERT INTO customer_info (id, card_number, expiration, cvv, zip) VALUES (?, ?, ?, ?, ?)';
  connection.query(query, [id, card_number, expiration, cvv, zip], (err, results, fields) => {
    callback(err, null);
  });
};

// export all functions
module.exports.getId = getId;
module.exports.insertCustomer = insertCustomer;
module.exports.insertShipping = insertShipping;
module.exports.insertPayment = insertPayment;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2RhdGFiYXNlL2luZGV4X29sZC5qcyJdLCJuYW1lcyI6WyJteXNxbCIsInJlcXVpcmUiLCJjb25uZWN0aW9uIiwiY3JlYXRlQ29ubmVjdGlvbiIsImhvc3QiLCJ1c2VyIiwiZGF0YWJhc2UiLCJnZXRJZCIsImNhbGxiYWNrIiwicXVlcnkiLCJlcnIiLCJyZXN1bHRzIiwiZmllbGRzIiwiaW5zZXJ0Q3VzdG9tZXIiLCJmaXJzdF9uYW1lIiwibGFzdF9uYW1lIiwiZW1haWwiLCJwdyIsImluc2VydFNoaXBwaW5nIiwiaWQiLCJsaW5lMSIsImxpbmUyIiwiY2l0eSIsInN0YXRlIiwiemlwIiwiaW5zZXJ0UGF5bWVudCIsImNhcmRfbnVtYmVyIiwiZXhwaXJhdGlvbiIsImN2diIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBLE1BQU1BLFFBQVFDLFFBQVEsT0FBUixDQUFkO0FBQ0EsTUFBTUMsYUFBYUYsTUFBTUcsZ0JBQU4sQ0FBdUI7QUFDeENDLFFBQU0sV0FEa0M7QUFFeENDLFFBQU0sTUFGa0M7QUFHeENDLFlBQVU7QUFIOEIsQ0FBdkIsQ0FBbkI7O0FBTUE7QUFDQSxJQUFJQyxRQUFRLFVBQVNDLFFBQVQsRUFBbUI7QUFDN0JOLGFBQVdPLEtBQVgsQ0FBaUIsdURBQWpCLEVBQTBFLENBQUNDLEdBQUQsRUFBTUMsT0FBTixFQUFlQyxNQUFmLEtBQTBCO0FBQ2xHLFFBQUlGLEdBQUosRUFBUztBQUNQRixlQUFTRSxHQUFULEVBQWMsSUFBZDtBQUNELEtBRkQsTUFFTztBQUNMRixlQUFTLElBQVQsRUFBZUcsT0FBZjtBQUNEO0FBQ0YsR0FORDtBQU9ELENBUkQ7O0FBVUE7QUFDQSxJQUFJRSxpQkFBaUIsVUFBU0MsVUFBVCxFQUFxQkMsU0FBckIsRUFBZ0NDLEtBQWhDLEVBQXVDQyxFQUF2QyxFQUEyQ1QsUUFBM0MsRUFBcUQ7QUFDeEUsUUFBTUMsUUFBUSwrRUFBZDtBQUNBUCxhQUFXTyxLQUFYLENBQWlCQSxLQUFqQixFQUF3QixDQUFDSyxVQUFELEVBQWFDLFNBQWIsRUFBd0JDLEtBQXhCLEVBQStCQyxFQUEvQixDQUF4QixFQUE0RCxDQUFDUCxHQUFELEVBQU1DLE9BQU4sRUFBZUMsTUFBZixLQUEwQjtBQUNwRkosYUFBU0UsR0FBVCxFQUFjLElBQWQ7QUFDRCxHQUZEO0FBR0QsQ0FMRDs7QUFPQTtBQUNBO0FBQ0EsSUFBSVEsaUJBQWlCLFVBQVNDLEVBQVQsRUFBYUMsS0FBYixFQUFvQkMsS0FBcEIsRUFBMkJDLElBQTNCLEVBQWlDQyxLQUFqQyxFQUF3Q0MsR0FBeEMsRUFBNkM7QUFDaEUsUUFBTWYsUUFBUSwwRkFBZDtBQUNBUCxhQUFXTyxLQUFYLENBQWlCQSxLQUFqQixFQUF3QixDQUFDVSxFQUFELEVBQUtDLEtBQUwsRUFBWUMsS0FBWixFQUFtQkMsSUFBbkIsRUFBeUJDLEtBQXpCLEVBQWdDQyxHQUFoQyxDQUF4QixFQUE4RCxDQUFDZCxHQUFELEVBQU1DLE9BQU4sRUFBZUMsTUFBZixLQUEwQjtBQUN0RkosYUFBU0UsR0FBVCxFQUFjLElBQWQ7QUFDRCxHQUZEO0FBR0QsQ0FMRDs7QUFPQTtBQUNBO0FBQ0EsSUFBSWUsZ0JBQWdCLFVBQVNOLEVBQVQsRUFBYU8sV0FBYixFQUEwQkMsVUFBMUIsRUFBc0NDLEdBQXRDLEVBQTJDSixHQUEzQyxFQUFnRDtBQUNsRSxRQUFNZixRQUFRLDBGQUFkO0FBQ0FQLGFBQVdPLEtBQVgsQ0FBaUJBLEtBQWpCLEVBQXdCLENBQUNVLEVBQUQsRUFBS08sV0FBTCxFQUFrQkMsVUFBbEIsRUFBOEJDLEdBQTlCLEVBQW1DSixHQUFuQyxDQUF4QixFQUFpRSxDQUFDZCxHQUFELEVBQU1DLE9BQU4sRUFBZUMsTUFBZixLQUEwQjtBQUN6RkosYUFBU0UsR0FBVCxFQUFjLElBQWQ7QUFDRCxHQUZEO0FBR0QsQ0FMRDs7QUFRQTtBQUNBbUIsT0FBT0MsT0FBUCxDQUFldkIsS0FBZixHQUF1QkEsS0FBdkI7QUFDQXNCLE9BQU9DLE9BQVAsQ0FBZWpCLGNBQWYsR0FBZ0NBLGNBQWhDO0FBQ0FnQixPQUFPQyxPQUFQLENBQWVaLGNBQWYsR0FBZ0NBLGNBQWhDO0FBQ0FXLE9BQU9DLE9BQVAsQ0FBZUwsYUFBZixHQUErQkEsYUFBL0IiLCJmaWxlIjoiaW5kZXhfb2xkLmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgbXlzcWwgPSByZXF1aXJlKCdteXNxbCcpO1xuY29uc3QgY29ubmVjdGlvbiA9IG15c3FsLmNyZWF0ZUNvbm5lY3Rpb24oe1xuICBob3N0OiAnbG9jYWxob3N0JyxcbiAgdXNlcjogJ3Jvb3QnLFxuICBkYXRhYmFzZTogJ2N1c3RvbWVyX2RhdGEnXG59KTtcblxuLy8gd3JpdGUgYSBmdW5jdGlvbiB0byBnZXQgY3VzdG9tZXJfaWRcbnZhciBnZXRJZCA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gIGNvbm5lY3Rpb24ucXVlcnkoJ1NFTEVDVCBpZCBGUk9NIGN1c3RvbWVyX2luZm8gT1JERVIgQlkgaWQgREVTQyBMSU1JVCAxJywgKGVyciwgcmVzdWx0cywgZmllbGRzKSA9PiB7XG4gICAgaWYgKGVycikge1xuICAgICAgY2FsbGJhY2soZXJyLCBudWxsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2FsbGJhY2sobnVsbCwgcmVzdWx0cyk7XG4gICAgfVxuICB9KTtcbn07XG5cbi8vIHdyaXRlIGZ1bmN0aW9uIHRvIGFkZCBjdXN0b21lcl9pbmZvXG52YXIgaW5zZXJ0Q3VzdG9tZXIgPSBmdW5jdGlvbihmaXJzdF9uYW1lLCBsYXN0X25hbWUsIGVtYWlsLCBwdywgY2FsbGJhY2spIHtcbiAgY29uc3QgcXVlcnkgPSAnSU5TRVJUIElOVE8gY3VzdG9tZXJfaW5mbyAoZmlyc3RfbmFtZSwgbGFzdF9uYW1lLCBlbWFpbCwgcHcpIFZBTFVFUyAoPywgPywgPyknO1xuICBjb25uZWN0aW9uLnF1ZXJ5KHF1ZXJ5LCBbZmlyc3RfbmFtZSwgbGFzdF9uYW1lLCBlbWFpbCwgcHddLCAoZXJyLCByZXN1bHRzLCBmaWVsZHMpID0+IHtcbiAgICBjYWxsYmFjayhlcnIsIG51bGwpO1xuICB9KTtcbn07XG5cbi8vIHdyaXRlIGZ1bmN0aW9uIHRvIGFkZCBzaGlwcGluZ19pbmZvXG4vLyBUT0RPOiBHZXQgaWQgZnJvbSBjdXN0b21lcl9kYXRhIGZpcnN0XG52YXIgaW5zZXJ0U2hpcHBpbmcgPSBmdW5jdGlvbihpZCwgbGluZTEsIGxpbmUyLCBjaXR5LCBzdGF0ZSwgemlwKSB7XG4gIGNvbnN0IHF1ZXJ5ID0gJ0lOU0VSVCBJTlRPIGN1c3RvbWVyX2luZm8gKGlkLCBsaW5lMSwgbGluZTIsIGNpdHksIHN0YXRlLCB6aXApIFZBTFVFUyAoPywgPywgPywgPywgPywgPyknO1xuICBjb25uZWN0aW9uLnF1ZXJ5KHF1ZXJ5LCBbaWQsIGxpbmUxLCBsaW5lMiwgY2l0eSwgc3RhdGUsIHppcF0sIChlcnIsIHJlc3VsdHMsIGZpZWxkcykgPT4ge1xuICAgIGNhbGxiYWNrKGVyciwgbnVsbCk7XG4gIH0pO1xufTtcblxuLy8gd3JpdGUgZnVuY3Rpb24gdG8gYWRkIHBheW1lbnRfaW5mb1xuLy8gVE9ETzogR2V0IGlkIGZyb20gY3VzdG9tZXJfZGF0YSBmaXJzdFxudmFyIGluc2VydFBheW1lbnQgPSBmdW5jdGlvbihpZCwgY2FyZF9udW1iZXIsIGV4cGlyYXRpb24sIGN2diwgemlwKSB7XG4gIGNvbnN0IHF1ZXJ5ID0gJ0lOU0VSVCBJTlRPIGN1c3RvbWVyX2luZm8gKGlkLCBjYXJkX251bWJlciwgZXhwaXJhdGlvbiwgY3Z2LCB6aXApIFZBTFVFUyAoPywgPywgPywgPywgPyknO1xuICBjb25uZWN0aW9uLnF1ZXJ5KHF1ZXJ5LCBbaWQsIGNhcmRfbnVtYmVyLCBleHBpcmF0aW9uLCBjdnYsIHppcF0sIChlcnIsIHJlc3VsdHMsIGZpZWxkcykgPT4ge1xuICAgIGNhbGxiYWNrKGVyciwgbnVsbCk7XG4gIH0pO1xufTtcblxuXG4vLyBleHBvcnQgYWxsIGZ1bmN0aW9uc1xubW9kdWxlLmV4cG9ydHMuZ2V0SWQgPSBnZXRJZDtcbm1vZHVsZS5leHBvcnRzLmluc2VydEN1c3RvbWVyID0gaW5zZXJ0Q3VzdG9tZXI7XG5tb2R1bGUuZXhwb3J0cy5pbnNlcnRTaGlwcGluZyA9IGluc2VydFNoaXBwaW5nO1xubW9kdWxlLmV4cG9ydHMuaW5zZXJ0UGF5bWVudCA9IGluc2VydFBheW1lbnQ7Il19