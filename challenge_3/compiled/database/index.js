const mysql = require('mysql');
const connection = mysql.createConnection({
  host: 'localhost',
  user: 'root',
  database: 'customer_data'
});

// write a function to get customer_id
var getId = function (callback) {
  connection.query('SELECT id FROM customer_info ORDER BY id DESC LIMIT 1', (err, results, fields) => {
    if (err) {
      callback(err, null);
    } else {
      callback(null, results);
    }
  });
};

// write function to add customer_info
var insertCustomer = function (first_name, last_name, email, pw, callback) {
  const query = 'INSERT INTO customer_info (first_name, last_name, email, pw) VALUES (?, ?, ?)';
  connection.query(query, [first_name, last_name, email, pw], (err, results, fields) => {
    callback(err, null);
  });
};

// write function to add shipping_info
// TODO: Get id from customer_data first
var insertShipping = function (id, line1, line2, city, state, zip) {
  const query = 'INSERT INTO customer_info (id, line1, line2, city, state, zip) VALUES (?, ?, ?, ?, ?, ?)';
  connection.query(query, [id, line1, line2, city, state, zip], (err, results, fields) => {
    callback(err, null);
  });
};

// write function to add payment_info
// TODO: Get id from customer_data first
var insertPayment = function (id, card_number, expiration, cvv, zip) {
  const query = 'INSERT INTO customer_info (id, card_number, expiration, cvv, zip) VALUES (?, ?, ?, ?, ?)';
  connection.query(query, [id, card_number, expiration, cvv, zip], (err, results, fields) => {
    callback(err, null);
  });
};

// export all functions
module.exports.getId = getId;
module.exports.insertCustomer = insertCustomer;
module.exports.insertShipping = insertShipping;
module.exports.insertPayment = insertPayment;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2RhdGFiYXNlL2luZGV4LmpzIl0sIm5hbWVzIjpbIm15c3FsIiwicmVxdWlyZSIsImNvbm5lY3Rpb24iLCJjcmVhdGVDb25uZWN0aW9uIiwiaG9zdCIsInVzZXIiLCJkYXRhYmFzZSIsImdldElkIiwiY2FsbGJhY2siLCJxdWVyeSIsImVyciIsInJlc3VsdHMiLCJmaWVsZHMiLCJpbnNlcnRDdXN0b21lciIsImZpcnN0X25hbWUiLCJsYXN0X25hbWUiLCJlbWFpbCIsInB3IiwiaW5zZXJ0U2hpcHBpbmciLCJpZCIsImxpbmUxIiwibGluZTIiLCJjaXR5Iiwic3RhdGUiLCJ6aXAiLCJpbnNlcnRQYXltZW50IiwiY2FyZF9udW1iZXIiLCJleHBpcmF0aW9uIiwiY3Z2IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsUUFBUUMsUUFBUSxPQUFSLENBQWQ7QUFDQSxNQUFNQyxhQUFhRixNQUFNRyxnQkFBTixDQUF1QjtBQUN4Q0MsUUFBTSxXQURrQztBQUV4Q0MsUUFBTSxNQUZrQztBQUd4Q0MsWUFBVTtBQUg4QixDQUF2QixDQUFuQjs7QUFNQTtBQUNBLElBQUlDLFFBQVEsVUFBU0MsUUFBVCxFQUFtQjtBQUM3Qk4sYUFBV08sS0FBWCxDQUFpQix1REFBakIsRUFBMEUsQ0FBQ0MsR0FBRCxFQUFNQyxPQUFOLEVBQWVDLE1BQWYsS0FBMEI7QUFDbEcsUUFBSUYsR0FBSixFQUFTO0FBQ1BGLGVBQVNFLEdBQVQsRUFBYyxJQUFkO0FBQ0QsS0FGRCxNQUVPO0FBQ0xGLGVBQVMsSUFBVCxFQUFlRyxPQUFmO0FBQ0Q7QUFDRixHQU5EO0FBT0QsQ0FSRDs7QUFVQTtBQUNBLElBQUlFLGlCQUFpQixVQUFTQyxVQUFULEVBQXFCQyxTQUFyQixFQUFnQ0MsS0FBaEMsRUFBdUNDLEVBQXZDLEVBQTJDVCxRQUEzQyxFQUFxRDtBQUN4RSxRQUFNQyxRQUFRLCtFQUFkO0FBQ0FQLGFBQVdPLEtBQVgsQ0FBaUJBLEtBQWpCLEVBQXdCLENBQUNLLFVBQUQsRUFBYUMsU0FBYixFQUF3QkMsS0FBeEIsRUFBK0JDLEVBQS9CLENBQXhCLEVBQTRELENBQUNQLEdBQUQsRUFBTUMsT0FBTixFQUFlQyxNQUFmLEtBQTBCO0FBQ3BGSixhQUFTRSxHQUFULEVBQWMsSUFBZDtBQUNELEdBRkQ7QUFHRCxDQUxEOztBQU9BO0FBQ0E7QUFDQSxJQUFJUSxpQkFBaUIsVUFBU0MsRUFBVCxFQUFhQyxLQUFiLEVBQW9CQyxLQUFwQixFQUEyQkMsSUFBM0IsRUFBaUNDLEtBQWpDLEVBQXdDQyxHQUF4QyxFQUE2QztBQUNoRSxRQUFNZixRQUFRLDBGQUFkO0FBQ0FQLGFBQVdPLEtBQVgsQ0FBaUJBLEtBQWpCLEVBQXdCLENBQUNVLEVBQUQsRUFBS0MsS0FBTCxFQUFZQyxLQUFaLEVBQW1CQyxJQUFuQixFQUF5QkMsS0FBekIsRUFBZ0NDLEdBQWhDLENBQXhCLEVBQThELENBQUNkLEdBQUQsRUFBTUMsT0FBTixFQUFlQyxNQUFmLEtBQTBCO0FBQ3RGSixhQUFTRSxHQUFULEVBQWMsSUFBZDtBQUNELEdBRkQ7QUFHRCxDQUxEOztBQU9BO0FBQ0E7QUFDQSxJQUFJZSxnQkFBZ0IsVUFBU04sRUFBVCxFQUFhTyxXQUFiLEVBQTBCQyxVQUExQixFQUFzQ0MsR0FBdEMsRUFBMkNKLEdBQTNDLEVBQWdEO0FBQ2xFLFFBQU1mLFFBQVEsMEZBQWQ7QUFDQVAsYUFBV08sS0FBWCxDQUFpQkEsS0FBakIsRUFBd0IsQ0FBQ1UsRUFBRCxFQUFLTyxXQUFMLEVBQWtCQyxVQUFsQixFQUE4QkMsR0FBOUIsRUFBbUNKLEdBQW5DLENBQXhCLEVBQWlFLENBQUNkLEdBQUQsRUFBTUMsT0FBTixFQUFlQyxNQUFmLEtBQTBCO0FBQ3pGSixhQUFTRSxHQUFULEVBQWMsSUFBZDtBQUNELEdBRkQ7QUFHRCxDQUxEOztBQVFBO0FBQ0FtQixPQUFPQyxPQUFQLENBQWV2QixLQUFmLEdBQXVCQSxLQUF2QjtBQUNBc0IsT0FBT0MsT0FBUCxDQUFlakIsY0FBZixHQUFnQ0EsY0FBaEM7QUFDQWdCLE9BQU9DLE9BQVAsQ0FBZVosY0FBZixHQUFnQ0EsY0FBaEM7QUFDQVcsT0FBT0MsT0FBUCxDQUFlTCxhQUFmLEdBQStCQSxhQUEvQiIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IG15c3FsID0gcmVxdWlyZSgnbXlzcWwnKTtcbmNvbnN0IGNvbm5lY3Rpb24gPSBteXNxbC5jcmVhdGVDb25uZWN0aW9uKHtcbiAgaG9zdDogJ2xvY2FsaG9zdCcsXG4gIHVzZXI6ICdyb290JyxcbiAgZGF0YWJhc2U6ICdjdXN0b21lcl9kYXRhJ1xufSk7XG5cbi8vIHdyaXRlIGEgZnVuY3Rpb24gdG8gZ2V0IGN1c3RvbWVyX2lkXG52YXIgZ2V0SWQgPSBmdW5jdGlvbihjYWxsYmFjaykge1xuICBjb25uZWN0aW9uLnF1ZXJ5KCdTRUxFQ1QgaWQgRlJPTSBjdXN0b21lcl9pbmZvIE9SREVSIEJZIGlkIERFU0MgTElNSVQgMScsIChlcnIsIHJlc3VsdHMsIGZpZWxkcykgPT4ge1xuICAgIGlmIChlcnIpIHtcbiAgICAgIGNhbGxiYWNrKGVyciwgbnVsbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNhbGxiYWNrKG51bGwsIHJlc3VsdHMpO1xuICAgIH1cbiAgfSk7XG59O1xuXG4vLyB3cml0ZSBmdW5jdGlvbiB0byBhZGQgY3VzdG9tZXJfaW5mb1xudmFyIGluc2VydEN1c3RvbWVyID0gZnVuY3Rpb24oZmlyc3RfbmFtZSwgbGFzdF9uYW1lLCBlbWFpbCwgcHcsIGNhbGxiYWNrKSB7XG4gIGNvbnN0IHF1ZXJ5ID0gJ0lOU0VSVCBJTlRPIGN1c3RvbWVyX2luZm8gKGZpcnN0X25hbWUsIGxhc3RfbmFtZSwgZW1haWwsIHB3KSBWQUxVRVMgKD8sID8sID8pJztcbiAgY29ubmVjdGlvbi5xdWVyeShxdWVyeSwgW2ZpcnN0X25hbWUsIGxhc3RfbmFtZSwgZW1haWwsIHB3XSwgKGVyciwgcmVzdWx0cywgZmllbGRzKSA9PiB7XG4gICAgY2FsbGJhY2soZXJyLCBudWxsKTtcbiAgfSk7XG59O1xuXG4vLyB3cml0ZSBmdW5jdGlvbiB0byBhZGQgc2hpcHBpbmdfaW5mb1xuLy8gVE9ETzogR2V0IGlkIGZyb20gY3VzdG9tZXJfZGF0YSBmaXJzdFxudmFyIGluc2VydFNoaXBwaW5nID0gZnVuY3Rpb24oaWQsIGxpbmUxLCBsaW5lMiwgY2l0eSwgc3RhdGUsIHppcCkge1xuICBjb25zdCBxdWVyeSA9ICdJTlNFUlQgSU5UTyBjdXN0b21lcl9pbmZvIChpZCwgbGluZTEsIGxpbmUyLCBjaXR5LCBzdGF0ZSwgemlwKSBWQUxVRVMgKD8sID8sID8sID8sID8sID8pJztcbiAgY29ubmVjdGlvbi5xdWVyeShxdWVyeSwgW2lkLCBsaW5lMSwgbGluZTIsIGNpdHksIHN0YXRlLCB6aXBdLCAoZXJyLCByZXN1bHRzLCBmaWVsZHMpID0+IHtcbiAgICBjYWxsYmFjayhlcnIsIG51bGwpO1xuICB9KTtcbn07XG5cbi8vIHdyaXRlIGZ1bmN0aW9uIHRvIGFkZCBwYXltZW50X2luZm9cbi8vIFRPRE86IEdldCBpZCBmcm9tIGN1c3RvbWVyX2RhdGEgZmlyc3RcbnZhciBpbnNlcnRQYXltZW50ID0gZnVuY3Rpb24oaWQsIGNhcmRfbnVtYmVyLCBleHBpcmF0aW9uLCBjdnYsIHppcCkge1xuICBjb25zdCBxdWVyeSA9ICdJTlNFUlQgSU5UTyBjdXN0b21lcl9pbmZvIChpZCwgY2FyZF9udW1iZXIsIGV4cGlyYXRpb24sIGN2diwgemlwKSBWQUxVRVMgKD8sID8sID8sID8sID8pJztcbiAgY29ubmVjdGlvbi5xdWVyeShxdWVyeSwgW2lkLCBjYXJkX251bWJlciwgZXhwaXJhdGlvbiwgY3Z2LCB6aXBdLCAoZXJyLCByZXN1bHRzLCBmaWVsZHMpID0+IHtcbiAgICBjYWxsYmFjayhlcnIsIG51bGwpO1xuICB9KTtcbn07XG5cblxuLy8gZXhwb3J0IGFsbCBmdW5jdGlvbnNcbm1vZHVsZS5leHBvcnRzLmdldElkID0gZ2V0SWQ7XG5tb2R1bGUuZXhwb3J0cy5pbnNlcnRDdXN0b21lciA9IGluc2VydEN1c3RvbWVyO1xubW9kdWxlLmV4cG9ydHMuaW5zZXJ0U2hpcHBpbmcgPSBpbnNlcnRTaGlwcGluZztcbm1vZHVsZS5leHBvcnRzLmluc2VydFBheW1lbnQgPSBpbnNlcnRQYXltZW50OyJdfQ==